entity DemetraUser {
    address String required,
    borndate LocalDate required,
    CF String unique required,
    autority MyAutority required
}

enum MyAutority {
    ADMIN, STUDENT, TEACHER
}

entity Degree {
	name String unique required,
    description String
}

// an ignored comment
/** not an ignored comment */
entity SingleCourse {
	name String unique required,
	description String,
	isfordegree Boolean required,
    cfu Integer
}

entity ExamAppeal{
    date Instant required,
    place String required,
    description String required
    
}

entity StudentExam{
    mark Integer,
    attainmentdate LocalDate
    
}

entity CourseNews {
	description String required
}

entity CourseMaterial {
    video Blob,
    document Blob required
}

entity PostMessage {
    description String required
    issent Boolean required,
}

entity Matriculation {
    matriculationdate LocalDate required,
    matriculationyear Integer required,
    document Blob required
    state Boolean required,
}

entity Payment {
    state Boolean required,
	amount Integer required
    description String required,
    note String 
}

relationship ManyToMany {
	Degree to SingleCourse
}

relationship OneToOne {
	DemetraUser{user(id) required} to User{id}
}


relationship OneToMany {
    DemetraUser to SingleCourse{idteacher required},
    DemetraUser{postsent(id)} to PostMessage{idsender required},
    DemetraUser{postreceived(id)} to PostMessage{idreceiver required},
    DemetraUser to Matriculation{idstudent required},
    DemetraUser to StudentExam{idstudent required},
    
    SingleCourse to CourseNews{idsinglecourse required},
    SingleCourse to CourseMaterial{idsinglecourse required},
    SingleCourse to ExamAppeal{idsinglecourse required},
    SingleCourse to Matriculation{idsinglecourse},
    SingleCourse to StudentExam{idsinglecourse required},
    
    Degree to Matriculation{iddegree required},
    
    Matriculation to Payment{idmatriculation required}
}



// Set pagination options
// paginate PostMessage with infinite-scroll
paginate all with pagination

// Use Data Transfert Objects (DTO)
dto * with mapstruct

// Set service options to all except few
service all with serviceImpl

// Set an angular suffix
// angularSuffix * with mySuffix
