
/*
 * This is the application and entity model for university elearning
 * default values: https://www.jhipster.tech/jdl/#annexes
 * Use jhipster import-jdl <this-file> to generate the entire application
 * Use jhipster 6.x (example 6.0.1)
 */

application {
	config {
		applicationType monolith,
		baseName DemetraElearning,
		packageName com.amanganiello.demetra,
		serverPort 8081,
		cacheProvider no,
		enableHibernateCache false,
		authenticationType session,
		devDatabaseType h2Memory,
		prodDatabaseType mssql,
		buildTool maven,
		serviceDiscoveryType false,
		testFrameworks[cucumber],
		clientPackageManager yarn,
		useSass true,
		skipUserManagement false,
		nativeLanguage it,
		languages[it, en]
	}
	entities *
}

// JDL definition entity for application

entity DemetraUser {
	gender Gender required,
	address String required,
	borndate LocalDate required,
        cf String required unique,
	usertype UserType required
}

enum Gender {
	MALE,
	FEMALE
}

enum UserType {
	STUDENT,
	TEACHER
}

entity Degree {
	name String required unique,
	description String
}

entity SingleCourse {
	title String required unique,
	description String,
	isfordegree Boolean required,
	cfu Integer
}

entity ExamAppeal {
	date Instant required,
	place String required,
	description String required

}

entity StudentExam {
	mark Integer,
	attainmentdate LocalDate

}

entity CourseNews {
	description String required
}

entity CourseMaterial {
	video Blob,
	document Blob required
}

entity PostMessage {
	description String required,
	issent Boolean required
}

entity Matriculation {
	matriculationdate LocalDate required,
	matriculationyear Integer required,
	document Blob required,
	state Boolean required
}

entity Payment {
	state Boolean required,
	amount Integer required,
	description String required,
	note String
}

// relationship info: https://www.jhipster.tech/managing-relationships/

/*
// it is splitted in two oneToMany in order to generate fields on UI
relationship ManyToMany {
	Degree{coursetitle(title)} to SingleCourse{degreename(name)}
}
 */

relationship OneToOne {
	DemetraUser{user(login)} to User with jpaDerivedIdentifier
}


relationship OneToMany {
    Degree{singlecourse} to SingleCourse{degreename(name)}

    SingleCourse{degree} to Degree{coursetitle(title)}

    DemetraUser{singlecourse} to SingleCourse{cfteacher(cf)},
    DemetraUser{postsent} to PostMessage{cfsender(cf)},
    DemetraUser{postreceived} to PostMessage{cfreceiver(cf)},
    DemetraUser{matriculation} to Matriculation{cfstudent(cf)},
    DemetraUser{studentexam} to StudentExam{cfstudent(cf)},
    
    SingleCourse{coursenews} to CourseNews{coursetitle(title)},
    SingleCourse{coursematerial} to CourseMaterial{coursetitle(title)},
    SingleCourse{examappeal} to ExamAppeal{coursetitle(title)},
    SingleCourse{matriculation} to Matriculation{coursetitle(title)},
    SingleCourse{studentexam} to StudentExam{coursetitle(title)},
    
    Degree{matriculation} to Matriculation{degreename(name)},
    
    Matriculation{payment} to Payment{idmatriculation}
}

// Set pagination options
// paginate PostMessage with infinite-scroll
paginate all with pagination

// Use Data Transfert Objects (DTO)
dto * with mapstruct

// Set service options to all except few
service all with serviceImpl

// Set an angular suffix
// angularSuffix * with mySuffix
filter *
